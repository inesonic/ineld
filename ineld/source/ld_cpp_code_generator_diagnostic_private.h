/*-*-c++-*-*************************************************************************************************************
* Copyright 2016 - 2023 Inesonic, LLC.
*
* This file is licensed under two licenses.
*
* Inesonic Commercial License, Version 1:
*   All rights reserved.  Inesonic, LLC retains all rights to this software, including the right to relicense the
*   software in source or binary formats under different terms.  Unauthorized use under the terms of this license is
*   strictly prohibited.
*
* GNU Public License, Version 2:
*   This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
*   License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later
*   version.
*
*   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
*   details.
*
*   You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
*   Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
********************************************************************************************************************//**
* \file
*
* This header defines the \ref Ld::CppCodeGeneratorDiagnostic::Private class.
***********************************************************************************************************************/

/* .. sphinx-project ineld */

#ifndef LD_CPP_CODE_GENERATOR_DIAGNOSTIC_PRIVATE_H
#define LD_CPP_CODE_GENERATOR_DIAGNOSTIC_PRIVATE_H

#include <QString>
#include <QSharedPointer>

#include "ld_common.h"
#include "ld_cpp_translation_phase.h"
#include "ld_cpp_code_generator_diagnostic.h"

namespace Ld {
    class CppContext;

    /**
     * Private implementation of the \ref Ld::CppCodeGeneratorDiagnostic class.
     */
    class LD_PUBLIC_API CppCodeGeneratorDiagnostic::Private {
        public:
            /**
             * Constructor
             *
             * \param[in] translationPhase       The translation phase that generated the diagnostic.
             *
             * \param[in] diagnosticCode         The diagnostic code.
             *
             * \param[in] backendMessage         An optional message generated by the compiler or linker backend.
             *
             * \param[in] context                The context containing the intermediate representation plus the
             *                                   compiler and linker settings.
             *
             * \param[in] compilerDiagnosticCode An optional compiler diagnostic code reported by the backend.
             *
             * \param[in] byteOffset             An optional zero-based byte offset into the context.
             *
             * \param[in] lineNumber             An optional one-based line number into the context.
             *
             * \param[in] columnNumber           An optional zero-based column number into the context.
             */
            Private(
                const CppTranslationPhase&               translationPhase,
                CppCodeGeneratorDiagnostic::Code         diagnosticCode,
                const QString&                           backendMessage,
                QSharedPointer<CppContext>               context,
                CppCodeGeneratorDiagnostic::CompilerCode compilerDiagnosticCode,
                unsigned long                            byteOffset,
                unsigned long                            lineNumber,
                unsigned long                            columnNumber
            );

            ~Private();

            /**
             * Method you can use to obtain the translation phase that generated the diagnostic.
             *
             * \return The translation phase where the error was detected.
             */
            const CppTranslationPhase& translationPhase() const;

            /**
             * Method you can use to obtain the diagnostic code.
             *
             * \return Returns the diagnostic code.
             */
            CppCodeGeneratorDiagnostic::Code diagnosticCode() const;

            /**
             * Method you can use to obtain the compiler context holding the intermediate representation.
             *
             * \return Returns a shared pointer to the underlying compiler context.
             */
            QSharedPointer<CppContext> context() const;

            /**
             * Method you can use to obtain the byte offset into the context associated with the diagnostic.
             *
             * \return Returns the byte offset into the context tied to the diagnostic.  A value of
             *         \ref Ld::CppCodeGeneratorDiagnostic::invalidByteOffset is returned if there is no location in the
             *         context (or no context) tied to this diagnostic.
             */
            unsigned long byteOffset() const;

            /**
             * Method you can use to obtain the one based line number into the context associated with the diagnostic.
             *
             * \return Returns the line number of the line in the context tied to the diagnostic.  A value of
             *         \ref Ld::CppCodeGeneratorDiagnostic::invalidLineNumber is returned if there is no location in the
             *         context (or no context) tied to this diagnostic.
             */
            unsigned long lineNumber() const;

            /**
             * Method you can use to obtain the zero based column number into the context associated with the
             * diagnostic.
             *
             * \return Returns the column number of the column in the context tied to the diagnostic.  A value of
             *         \ref Ld::CppCodeGeneratorDiagnostic::invalidColumnNumber is returned if there is no location in
             *         the context (or no context) tied to this diagnostic.
             */
            unsigned long columnNumber() const;

            /**
             * Method you can use to obtain the compiler diagnostic code associated with this diagnostic.
             *
             * \return Returns the compiler diagnostic code associated with this diagnostic.  A value of
             *         Cbe::CppCompilerErrorCodes::NO_ERROR is returned if there is no compiler diagnostic tied to this
             *         diagnostic.
             */
            CppCodeGeneratorDiagnostic::CompilerCode compilerCode() const;

            /**
             * Method you can use to obtain a string describing the error as reported by the compiler backend.
             *
             * \return Returns the compiler diagnostic message as a string.
             */
            QString backendMessage() const;

        private:
            /**
             * The translation phase where the diagnostic was generated.
             */
            CppTranslationPhase currentTranslationPhase;

            /**
             * The diagnostic code for this diagnostic.
             */
            CppCodeGeneratorDiagnostic::Code currentDiagnosticCode;

            /**
             * Message generated by the compiler or linker backend.
             */
            QString currentBackendMessage;

            /**
             * Shared pointer to the C++ compiler context.
             */
            QSharedPointer<CppContext> currentContext;

            /**
             * The compiler diagnostic code.
             */
            CppCodeGeneratorDiagnostic::CompilerCode currentCompilerDiagnosticCode;

            /**
             * The byte offset into the context tied to this diagnostic.
             */
            unsigned long currentByteOffset;

            /**
             * The line number of the line tied to this diagnostic.
             */
            unsigned long currentLineNumber;

            /**
             * The column number of the column tied to this diagnostic.
             */
            unsigned long currentColumnNumber;
    };
};

#endif
