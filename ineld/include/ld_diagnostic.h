/*-*-c++-*-*************************************************************************************************************
* Copyright 2016 - 2023 Inesonic, LLC.
*
* This file is licensed under two licenses.
*
* Inesonic Commercial License, Version 1:
*   All rights reserved.  Inesonic, LLC retains all rights to this software, including the right to relicense the
*   software in source or binary formats under different terms.  Unauthorized use under the terms of this license is
*   strictly prohibited.
*
* GNU Public License, Version 2:
*   This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
*   License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later
*   version.
*
*   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
*   details.
*
*   You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
*   Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
********************************************************************************************************************//**
* \file
*
* This header defines the \ref Ld::Diagnostic class.
***********************************************************************************************************************/

/* .. sphinx-project ineld */

#ifndef LD_CODE_GENERATOR_DIAGNOSTIC_H
#define LD_CODE_GENERATOR_DIAGNOSTIC_H

#include <QCoreApplication> // For Q_DECLARE_TR_FUNCTIONS macro.
#include <QSharedPointer>
#include <QString>
#include <QSharedPointer>

#include <util_hash_functions.h>

#include "ld_common.h"
#include "ld_element_structures.h"

namespace Ld {
    class CodeGenerator;
    class TranslationPhase;

    /**
     * Base class for diagnostics generated by a code generator.  This object uses a pimpl design pattern allowing you
     * to efficiently pass the diagnostic by value, if desired.
     */
    class LD_PUBLIC_API Diagnostic {
        Q_DECLARE_TR_FUNCTIONS(Ld::Diagnostic)

        public:
            /**
             * Enumeration of diagnostic types.
             */
            enum class Type:unsigned char {
                /**
                 * Indicates an empty diagnostic.
                 */
                NONE,

                /**
                 * Indicates an informational condition.
                 */
                INFORMATION,

                /**
                 * Indicates a pause condition.
                 */
                PAUSED,

                /**
                 * Indicates a questionable condition that may or may not be fatal.
                 */
                WARNING,

                /**
                 * Indicates a fatal error of some kind.
                 */
                FATAL_ERROR,

                /**
                 * Indicates a fatal run-time error of some kond.
                 */
                RUNTIME_ERROR,

                /**
                 * Indicates an internal error of some kind.
                 */
                INTERNAL_ERROR
            };

            Diagnostic();

            /**
             * Constructor
             *
             * \param[in] element           The element that is associated with this diagnostic.
             *
             * \param[in] codeGeneratorName The name of the code generator that created this diagnostic.
             *
             * \param[in] diagnosticType    Indicates if this diagnostic is fatal, a warning, etc.
             */
            Diagnostic(ElementPointer element, const QString& codeGeneratorName, Type diagnosticType);

            /**
             * Copy constructor.
             *
             * \param[in] other The instance to be copied.
             */
            Diagnostic(const Diagnostic& other);

            virtual ~Diagnostic();

            /**
             * Method that returns the element tied to this diagnostic.
             *
             * \return Returns a pointer to the element tied to this diagnostic.
             */
            ElementPointer element() const;

            /**
             * Method that returns the name of the generator that created this diagnostic.
             *
             * \return Returns the code generator name that originated this diagnostic.
             */
            QString codeGeneratorName() const;

            /**
             * Method that returns the translation phase where the error was detected.
             *
             * \return Returns the translation phase where the error was detected.
             */
            virtual const TranslationPhase& translationPhase() const = 0;

            /**
             * Method that indicates if this diagnostic is a warning, and error, or something else.
             *
             * \return Returns the diagnostic type.
             */
            Type diagnosticType() const;

            /**
             * Convenience method that returns the code generator that created this diagnostic.  The code generator
             * must be registered with the system for this method to work.
             *
             * \return Returns a shared pointer to the code generator.
             */
            QSharedPointer<CodeGenerator> codeGenerator() const;

            /**
             * Method you can use to obtain a diagnostic message.
             *
             * \return Returns a usable message describing the diagnostic.
             */
            virtual QString diagnosticMessage() const = 0;

            /**
             * Assignment operator
             *
             * \param[in] other The instance to be copied.
             */
            Diagnostic& operator=(const Diagnostic& other);

        protected:
            /**
             * Method that returns the diagnostic type as a string.
             */
            QString diagnosticTypeMessage() const;

        private:
            class Private;

            QSharedPointer<Private> impl;
    };

    /**
     * Hashing function for use with the \ref Ld::Diagnostic::Type enumeration.
     *
     * \param[in] value The value to calculate a hash for.
     *
     * \param[in] seed  An optional seed value.
     *
     * \return Returns a hash for the provided seed.
     */
    LD_PUBLIC_API Util::HashResult qHash(Diagnostic::Type value, Util::HashSeed seed = 0);
};

#endif
