/*-*-c++-*-*************************************************************************************************************
* Copyright 2016 - 2023 Inesonic, LLC.
*
* This file is licensed under two licenses.
*
* Inesonic Commercial License, Version 1:
*   All rights reserved.  Inesonic, LLC retains all rights to this software, including the right to relicense the
*   software in source or binary formats under different terms.  Unauthorized use under the terms of this license is
*   strictly prohibited.
*
* GNU Public License, Version 2:
*   This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
*   License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later
*   version.
*
*   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
*   details.
*
*   You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
*   Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
********************************************************************************************************************//**
* \file
*
* This header defines the \ref Ld::CodeGenerationEngine class.
***********************************************************************************************************************/

/* .. sphinx-project ineld */

#ifndef LD_CODE_GENERATION_ENGINE_H
#define LD_CODE_GENERATION_ENGINE_H

#include <QCoreApplication> // For Q_DECLARE_TR_FUNCTIONS macro.
#include <QString>
#include <QThread>
#include <QList>
#include <QSet>
#include <QSharedPointer>

#include "ld_common.h"
#include "ld_element_structures.h"
#include "ld_diagnostic_structures.h"
#include "ld_root_element.h"
#include "ld_code_generator_output_type.h"
#include "ld_code_generator_output_type_container.h"

namespace Model {
    class Status;
}

namespace Ud {
    class UsageData;
};

namespace Ld {
    class CodeGenerator;
    class RootElement;
    class Translator;
    class TranslationPhase;

    /**
     * Base class for the code generation engine.  The code generation engine manages the details associated with a
     * specific code generation run.  Class instances will be created and destroyed with each run.  Note that the code
     * generation process is designed to run in a distinct thread.
     */
    class LD_PUBLIC_API CodeGenerationEngine:public QThread {
        Q_DECLARE_TR_FUNCTIONS(Ld::CodeGenerationEngine)

        public:
            /**
             * Constructor.
             *
             * \param[in] codeGenerator     The code generator that instantiated this class instance.
             *
             * \param[in] rootElement       The root element used during the translation.
             *
             * \param[in] outputFile        The name of the output file to be generated.  If the output type is not
             *                              exportable, then the translated output file will be deleted by this class
             *                              at the end of scope.
             *
             * \param[in] outputType        The type of output to be generated by this code generation engine.
             *
             * \param[in] exportMode        The export mode to use for this translation.
             *
             * \param[in] usageData         The usage data instance to use with this engine.
             */
            CodeGenerationEngine(
                CodeGenerator*                          codeGenerator,
                QSharedPointer<RootElement>             rootElement,
                const QString&                          outputFile,
                const CodeGeneratorOutputTypeContainer& outputType,
                CodeGeneratorOutputType::ExportMode     exportMode,
                Ud::UsageData*                          usageData
            );

            ~CodeGenerationEngine() override;

            /**
             * Method you can use to obtain the generator tied to this engine.
             *
             * \return Returns a reference to the generator tied to this engine.
             */
            CodeGenerator& codeGenerator();

            /**
             * Method you can use to obtain the generator tied to this engine.
             *
             * \return Returns a reference to the generator tied to this engine.
             */
            const CodeGenerator& codeGenerator() const;

            /**
             * Method you can use to obtain the name of the desired output file.
             *
             * \return Returns the name of the desired output file.
             */
            QString outputFile() const;

            /**
             * Method you can call to obtain the root element for this translation.
             *
             * \return Returns a pointer to the root element.
             */
            QSharedPointer<RootElement> rootElement() const;

            /**
             * Method you can call to obtain the usage data instance used to report usage of features.
             *
             * \return Returns a reference to the usage data instance.
             */
            Ud::UsageData* usageData() const;

            /**
             * Method you can call to obtain the current translation phase.
             *
             * \return Returns a reference to the current translation phase.
             */
            const TranslationPhase& translationPhase() const;

            /**
             * Method you can use to determine the output type that is currently being generated.
             *
             * \return Returns the output type being generated.
             */
            const CodeGeneratorOutputTypeContainer& outputType() const;

            /**
             * Method you can use to determine the currently selected export mode.
             *
             * \return Returns the currently selected export mode.
             */
            CodeGeneratorOutputType::ExportMode exportMode() const;

            /**
             * Method you can use to determine if imports should be included.
             *
             * \return Returns true if imports should be included.  Returns false if imports should not be included.
             */
            bool includeImports() const;

            /**
             * Method that is called by the code generator to begin a translation.  The default implementation will
             * call \ref translationPhase for each phase, in order.
             *
             * \return Returns true on success, returns false on error.
             */
            virtual bool translate();

            /**
             * Method you can call to abort the code generation engine.  The method will block until the engine is
             * aborted.
             */
            virtual void abort();

            /**
             * Method you can use to obtain a list of reported diagnostics.
             *
             * \return Returns a list of reported diagnostics from the last translation.  The returned reference will
             *         remain valid until the next translation operation.
             */
            const DiagnosticPointerList& reportedDiagnostics() const;

            /**
             * Method you can use to determine if a translation is ready for export.
             *
             * \param[in] outputType A value used to indicate the type of output to be generated.  The meaning of this
             *                       value is dependent on the type of generator.
             *
             * \return Returns true if a translation is available.
             */
            virtual bool translationAvailable() const;

            /**
             * Method you can use to obtain a translator, by name.
             *
             * \param[in] elementName The name of the element we want a translator for.
             *
             * \return Returns a shared pointer to the desired translator.  A null pointer is returned if no translator
             *         is available.
             */
            QSharedPointer<Translator> translator(const QString& elementName) const;

            /**
             * Method that can be called by a translator to insert the translation of a child element.  This method will
             * be called when the element heirarchy needs to be honored.  The default implementation will simply invoke
             * the correct translator method for the child node.  Note that translator methods are responsible for
             * traversing the child elenents in the correct order, processing the translated output from those elements.
             *
             * \param[in] element          The child element to be translated.
             *
             * \return Returns true on success, returns false on error.
             */
            virtual bool translateChild(ElementPointer element);

            /**
             * Method that is called each time the code generator detects an error condition.  This method may be
             * triggered multiple times during a translation and may be triggered from a different thread from that used
             * to invoke the code generator.  Reports the error to the code generator.
             *
             * \param[in] diagnostic The diagnostic tied to the error, warning, etc.
             */
            void translationErrorDetected(DiagnosticPointer diagnostic);

            /**
             * Convenience method that can be called each time the code generator detects an error condition.  This
             * method is simply a wrapper for the
             * \ref CodeGenerationEngine::translationErrorDetected(DiagnosticPointer) method.
             *
             * \param[in] diagnostic A pointer to a newly created diagnostic class instance.  Note that this method will
             *                       take ownership of the pointer.
             */
            void translationErrorDetected(Diagnostic* diagnostic);

            /**
             * Method you can call to update the number of successfully completed translation steps.  You should call
             * this method from translators if they intentionally avoid calling
             * \ref Ld::CodeGenerationEngine::translateChild or \ref Ld::CodeGenerationEngine::translateElement for
             * any children.
             */
            void translationStepCompleted();

        protected:
            /**
             * Method that performs the background translation process.
             */
            void run() final;

            /**
             * Method you can call from derived classes to flag that a translation is available.
             *
             * \param[in] nowTranslationAvailable If true, a translation will be marked as available.  If false, the
             *                                    class will indicate that no translation is available.
             */
            void setTranslationAvailable(bool nowTranslationAvailable = true);

            /**
             * Method you can call to advance to the next translation phase.
             */
            void advanceToNextPhase();

            /**
             * Pure virtual method that returns the translation phase instance to be used.
             *
             * \return Returns a pointer to the currect translation phase instance.
             */
            virtual TranslationPhase* createTranslationPhase() const = 0;

            /**
             * Method that is called to determine if all root imports should be used.  You should overload this
             * method to determine if root imports should be included.
             *
             * \return Returns true if all root imports should be included.  Returns false if only the main root
             *         element should be used.
             */
            virtual bool includeRootImports() const = 0;

            /**
             * Method that can be called by the translator to translate an arbitrary element.  This method will be
             * called when the element heirarchy does not need to be followed and will be called once for each element
             * in the element heirarchy without regard to their position.  The default implementation will simply invoke
             * the correct translator method for the child node.
             *
             * \param[in] element The child element to be translated.
             *
             * \return Returns true on success, returns false on error.
             */
            virtual bool translateElement(ElementPointer element);

            /**
             * Pure virtual method that calls the correct pre-translation method for the required translation.
             *
             * \return Returns true on success, returns false on error.
             */
            virtual bool preTranslate() = 0;

            /**
             * Pure virtual method that calls the correct post-translation method for the required translation.
             *
             * \return Returns true on success, returns false on error.
             */
            virtual bool postTranslate() = 0;

            /**
             * Method that is called when the code generator starts a translation.  Reports the start of translation to
             * the visual tied to the code generator.
             *
             * \param[in] numberPerElementTranslationSteps The expected total number of per-element translation steps
             *                                             to be performed.
             */
            void translationStarted(unsigned long numberPerElementTranslationSteps);

            /**
             * Method that is called when the code generator begins a new translation phase.  Reports the phase change
             * to the visual tied to the code generator.
             */
            void translationPhaseStarted();

            /**
             * Method that is called to indicate that a translation step has completed.
             *
             * \param[in] numberCompletedSteps The number of completed steps.
             */
            void translationStepCompleted(unsigned long numberCompletedSteps);

            /**
             * Method that is called when the code generator completes a translation process.  Reports that the
             * translation has completed to the associated visual.
             *
             * \param[in] success Holds true if the translation was successful.  Holds false if the translation failed.
             */
            void translationCompleted(bool success);

            /**
             * Method that is called when the code generator aborts the translation process.  Reports that the
             * translation has been aborted to the associated visual.
             */
            void translationAborted();

            /**
             * Method you must overload to report a missing translator.
             *
             * \param[in] element The element that was missing a translator.
             *
             * \return Returns true if the code generator should abort.  Returns false if the code
             *         generator should ignore the missing translator and continue.
             */
            virtual bool missingTranslator(ElementPointer element) = 0;

        private:
            /**
             * Method that clears all pending errors on all children of a root element.
             *
             * \param[in] rootElement The root element to have error status cleared on.
             */
            void clearErrorsUnderRootElement(QSharedPointer<RootElement> rootElement);

            /**
             * Method that is called to process a root element.
             *
             * \param[in] rootElement The root element to be translated.
             *
             * \return Returns true on success, returns false on error.
             */
            bool translateRootElement(QSharedPointer<RootElement> rootElement);

            /**
             * Method that is called to build up a list of root elements to be processed.
             *
             * \return Returns a list of root elements to be processed.
             */
            RootElement::RootElementList rootElementsToProcess();

            /**
             * Method that determines the total number of element translator calls to be performed.
             *
             * \param[in] numberElements The number of elements in the translation set.
             *
             * \return Returns the total number of per-element translator calls to be performed.
             */
            unsigned long numberPerElementTranslationStepsToPerform(unsigned long numberElements) const;

            /**
             * Flag that is set if this code generation has been commanded to abort.  Allows the code generation to
             * terminate gracefully.
             */
            bool abortRequested;

            /**
             * The name of the output file we're expected to generate.
             */
            QString currentOutputFile;

            /**
             * The generator that owns this engine.
             */
            CodeGenerator* currentGenerator;

            /**
             * The root element to perform translation on.
             */
            QSharedPointer<RootElement> currentRootElement;

            /**
             * The usage data instance to be used by this generator.
             */
            Ud::UsageData* currentUsageData;

            /**
             * Pointer to the current translation phase.
             */
            TranslationPhase* currentTranslationPhase;

            /**
             * The current output type.
             */
            CodeGeneratorOutputTypeContainer currentOutputType;

            /**
             * The current export mode.
             */
            CodeGeneratorOutputType::ExportMode currentExportMode;

            /**
             * Flag that is used to indicate that a translation is now available.
             */
            bool currentTranslationAvailable;

            /**
             * Method that returns the current list of reported diagnostics.
             */
            DiagnosticPointerList currentReportedDiagnostics;

            /**
             * Counter used to track progress during a translation.
             */
            unsigned long numberTranslationStepsCompleted;
    };
};

#endif
