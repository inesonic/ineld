/*-*-c++-*-*************************************************************************************************************
* Copyright 2016 - 2023 Inesonic, LLC.
*
* This file is licensed under two licenses.
*
* Inesonic Commercial License, Version 1:
*   All rights reserved.  Inesonic, LLC retains all rights to this software, including the right to relicense the
*   software in source or binary formats under different terms.  Unauthorized use under the terms of this license is
*   strictly prohibited.
*
* GNU Public License, Version 2:
*   This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
*   License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later
*   version.
*
*   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
*   details.
*
*   You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
*   Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
********************************************************************************************************************//**
* \file
*
* This header defines the \ref Ld::HtmlCodeGeneratorDiagnostic class.
***********************************************************************************************************************/

/* .. sphinx-project ineld */

#ifndef LD_HTML_CODE_GENERATOR_DIAGNOSTIC_H
#define LD_HTML_CODE_GENERATOR_DIAGNOSTIC_H

#include <QCoreApplication> // For Q_DECLARE_TR_FUNCTIONS macro.
#include <QString>
#include <QSharedPointer>

#include "ld_common.h"
#include "ld_element_structures.h"
#include "ld_html_translation_phase.h"
#include "ld_diagnostic.h"

namespace Ld {
    class XmlExportContext;

    /**
     * Base class for diagnostics generated by a code generator.  This object uses a pimpl design pattern allowing you
     * to efficiently pass the diagnostic by value, if desired.
     */
    class LD_PUBLIC_API HtmlCodeGeneratorDiagnostic:public Diagnostic {
        Q_DECLARE_TR_FUNCTIONS(Ld::HtmlCodeGeneratorDiagnostic)

        public:
            /**
             * Type representing the translation diagnostic being reported.
             */
            enum class Code {
                /**
                 * Indicates no diagnostic.
                 */
                NO_DIAGNOSTIC,

                /**
                 * Indicates an unexpected translation phase.  This generally representing a bug in the code.
                 */
                UNEXPECTED_TRANSLATION_PHASE,

                /**
                 * Indicates that a translator has not been registered for a given element.
                 */
                MISSING_TRANSLATOR,

                /**
                 * Indicates that the context reported the error.
                 */
                CONTEXT_ERROR,

                /**
                 * Indicates a missing or bad non-image payload.
                 */
                BAD_PAYLOAD,

                /**
                 * Indicates a missing or bad image payload.
                 */
                BAD_IMAGE_PAYLOAD,

                /**
                 * Indicates we could not save our image to an internal buffer.
                 */
                IMAGE_SAVE_ERROR,

                /**
                 * Indicates the current HTML style is not supported by a given element.
                 */
                HTML_STYLE_NOT_SUPPORTED,

                /**
                 * Indicates a format error was identified within an element.
                 */
                FORMAT_ERROR,
            };

            HtmlCodeGeneratorDiagnostic();

            /**
             * Constructor
             *
             * \param[in] element          The element that is associated with this diagnostic.
             *
             * \param[in] diagnosticType   Indicates if this diagnostic is fatal, a warning, etc.
             *
             * \param[in] translationPhase The translation phase that generated the diagnostic.
             *
             * \param[in] diagnosticCode   The diagnostic code.
             *
             * \param[in] context          An optional context containing the generated HTML output as stands.
             */
            HtmlCodeGeneratorDiagnostic(
                ElementPointer                   element,
                Type                             diagnosticType,
                const HtmlTranslationPhase&      translationPhase,
                Code                             diagnosticCode,
                QSharedPointer<XmlExportContext> context = QSharedPointer<XmlExportContext>()
            );

            /**
             * Copy constructor.
             *
             * \param[in] other The instance to be copied.
             */
            HtmlCodeGeneratorDiagnostic(const HtmlCodeGeneratorDiagnostic& other);

            ~HtmlCodeGeneratorDiagnostic() override;

            /**
             * Method you can use to obtain a diagnostic message.
             *
             * \return Returns a usable message describing the diagnostic.
             */
            QString diagnosticMessage() const final;

            /**
             * Method you can use to obtain the translation phase that generated the diagnostic.
             *
             * \return The translation phase where the error was detected.
             */
            const HtmlTranslationPhase& translationPhase() const override;

            /**
             * Method you can use to obtain the diagnostic code.
             *
             * \return Returns the diagnostic code.
             */
            Code diagnosticCode() const;

            /**
             * Method you can use to obtain the compiler context holding the intermediate representation.
             *
             * \return Returns a shared pointer to the underlying compiler context.  A null pointer is returned if this
             *         diagnostic has no associated context.
             */
            QSharedPointer<XmlExportContext> context() const;

            /**
             * Assignment operator
             *
             * \param[in] other The instance to be copied.
             */
            HtmlCodeGeneratorDiagnostic& operator=(const HtmlCodeGeneratorDiagnostic& other);

        private:
            class Private;

            QSharedPointer<Private> impl;
    };
};

#endif
