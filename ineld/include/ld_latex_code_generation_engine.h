/*-*-c++-*-*************************************************************************************************************
* Copyright 2016 - 2023 Inesonic, LLC.
*
* This file is licensed under two licenses.
*
* Inesonic Commercial License, Version 1:
*   All rights reserved.  Inesonic, LLC retains all rights to this software, including the right to relicense the
*   software in source or binary formats under different terms.  Unauthorized use under the terms of this license is
*   strictly prohibited.
*
* GNU Public License, Version 2:
*   This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
*   License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later
*   version.
*
*   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
*   details.
*
*   You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
*   Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
********************************************************************************************************************//**
* \file
*
* This header defines the \ref Ld::LaTeXCodeGenerationEngine class.
***********************************************************************************************************************/

/* .. sphinx-project ineld */

#ifndef LD_LATEX_CODE_GENERATION_ENGINE_H
#define LD_LATEX_CODE_GENERATION_ENGINE_H

#include <QCoreApplication> // For Q_DECLARE_TR_FUNCTIONS macro.
#include <QString>
#include <QList>
#include <QMap>
#include <QSet>
#include <QSharedPointer>

#include "ld_common.h"
#include "ld_format_container.h"
#include "ld_format_organizer.h"
#include "ld_element_structures.h"
#include "ld_latex_code_generator.h"
#include "ld_code_generator_output_type_container.h"
#include "ld_code_generation_engine.h"

namespace Ud {
    class UsageData;
};

namespace Ld {
    class CodeGenerator;
    class Diagnostic;
    class RootElement;
    class Translator;
    class TranslationPhase;
    class TextExportContext;

    /**
     * This class is the per-run LaTeX code generation engine.
     */
    class LD_PUBLIC_API LaTeXCodeGenerationEngine:public CodeGenerationEngine {
        Q_DECLARE_TR_FUNCTIONS(Ld::LaTeXCodeGenerationEngine)

        public:
            /**
             * Type used to indicate the math generation mode.
             */
            typedef LaTeXCodeGenerator::ImageMode ImageMode;

            /**
             * Type used to indicate the desired Unicode mode
             */
            typedef LaTeXCodeGenerator::UnicodeMode UnicodeMode;

            /**
             * Value used to indicate the minimum \\usepackage relative ordering.
             */
            static constexpr int minimumPackageRelativeOrdering = -100;

            /**
             * Value used to indicate the nominal \\userpackage relative ordering.  Use this value if you do not care
             * about the ordering of a set of package commands.
             */
            static constexpr int nominalPackageRelativeOrdering = 0;

            /**
             * Value used to indicate the maximum \\usepackage relative ordering.
             */
            static constexpr int maximumPackageRelativeOrdering = +100;

            /**
             * Value used to indicate the nominal value for entries after package definitions.
             */
            static constexpr int nominalNewCommandRelativeOrdering = +1000;

            /**
             * Constructor.
             *
             * \param[in] codeGenerator            The code generator that instantiated this class instance.
             *
             * \param[in] rootElement              The root element used during the translation.
             *
             * \param[in] outputFile               The name of the output file to be generated.  If the output type is
             *                                     not exportable, then the translated output file will be deleted by
             *                                     this class at the end of scope.
             *
             * \param[in] outputType               The type of output to be generated by this code generation engine.
             *
             * \param[in] exportMode               A value indicating the export mode to be used.
             *
             * \param[in] usageData                The usage data instance to use with this engine.
             *
             * \param[in] singleFile               If true, all the generated LaTex will be contained in the main
             *                                     exported context and not in payloads.
             *
             * \param[in] includeCopyright         If true, each generated LaTeX file will include a copyright message.
             *                                     If false, no copyright will be included.
             *
             * \param[in] unicodeTranslationMode   Indicates the desired Unicode translation mode to use.
             *
             * \param[in] ignoreMissingTranslators If true, missing per-element translators will be ignored.  If false,
             *                                     missing per-element translators will generate an error.
             *
             * \param[in] imageMode                The desired image generation mode.
             *
             * \param[in] includeImports           If true, root imports will be included.  If false, root imports will
             *                                     be excluded.
             */
            LaTeXCodeGenerationEngine(
                CodeGenerator*                          codeGenerator,
                QSharedPointer<RootElement>             rootElement,
                const QString&                          outputFile,
                const CodeGeneratorOutputTypeContainer& outputType,
                CodeGeneratorOutputType::ExportMode     exportMode,
                Ud::UsageData*                          usageData,
                bool                                    singleFile,
                bool                                    includeCopyright,
                UnicodeMode                             unicodeTranslationMode,
                bool                                    ignoreMissingTranslators,
                ImageMode                               imageMode,
                bool                                    includeImports
            );

            ~LaTeXCodeGenerationEngine() override;

            /**
             * Method you can use to determine the require image mode.
             *
             * \return Returns the required image mode.
             */
            ImageMode imageMode() const;

            /**
             * Method you can use to determine if all the generated LaTeX should be contained in a single file.
             *
             * \return Returns true if all the LaTeX should be placed in a single file.  If false, the generated
             *         LaTeX should be separated out into multiple files.
             */
            bool singleFile() const;

            /**
             * Method you can use to determine if copyright headers should be included.
             *
             * \return Returns true if copyright headers should be included.  Returns false if copyright headers should
             *         be excluded.
             */
            bool includeCopyright() const;

            /**
             * Method you can use to determine the desired Unicode translation mode.
             *
             * \return Returns the requested Unicode translation mode.
             */
            UnicodeMode unicodeTranslationMode() const;

            /**
             * Method you can use to obtain the context used to write the LaTeX and side-band data.
             *
             * \return Returns a reference to the requested context.
             */
            TextExportContext& context();

            /**
             * Method you can use to obtain the context used to write the LaTeX and side-band data.
             *
             * \return Returns a reference to the requested context.
             */
            const TextExportContext& context() const;

            /**
             * Method you can use to obtain a shared pointer to the context used to write the LaTeX and side-band data.
             *
             * \return Returns a shared pointer to the requested context.
             */
            QSharedPointer<TextExportContext> contextPointer() const;

            /**
             * Method that can be used to define a set of preamble commands.
             *
             * Preamble commands can be inserted in either before or after the LaTeX \\usepackage commands and will be
             * ordered based on a priority value.  Note that duplicate entries will be excluded.
             *
             * \param[in] commandSequence The command sequence to be inserted.
             *
             * \param[in] relativeOrder   A value used to indicate the ordering requirements.  An entry with a higher
             *                            order will be added later.
             *
             * \return Returns true on success, returns false if the command sequence has already been added.
             */
            bool addPreamble(const QString& commandSequence, int relativeOrder);

            /**
             * Method that can be called by translators to register a needed package.  You should call this method
             * during the \ref Ld::LaTeXTranslationPhase::Phase::IDENTIFY_DEPENDENCIES phase.  The packages will
             * be added to the dependencies file at the end of this phase.
             *
             * \param[in] packageName   The name of the package.
             *
             * \param[in] options       Options to apply to the package.
             *
             * \param[in] relativeOrder The relative order.
             *
             * \return Returns true on success, returns false if the package has already been requested but with
             *         different options.
             */
            bool addPackage(
                const QString&        packageName,
                const QList<QString>& options,
                int                   relativeOrder = nominalPackageRelativeOrdering
            );

            /**
             * Method that can be called by translators to register a needed package.  You should call this method
             * during the \ref Ld::LaTeXTranslationPhase::Phase::IDENTIFY_DEPENDENCIES phase.  The packages will
             * be added to the dependencies file at the end of this phase.
             *
             * \param[in] packageName   The name of the package.
             *
             * \param[in] relativeOrder The relative order.
             *
             * \return Returns true on success, returns false if the package has already been requested but with
             *         different options.
             */
            bool addPackage(const QString& packageName, int relativeOrder = nominalPackageRelativeOrdering);

            /**
             * Method that can be called by translators to register a needed package.  You should call this method
             * during the \ref Ld::LaTeXTranslationPhase::Phase::IDENTIFY_DEPENDENCIES phase.  The packages will
             * be added to the dependencies file at the end of this phase.
             *
             * \param[in] packageName   The name of the package.
             *
             * \param[in] option        A single option to apply to the package.
             *
             * \param[in] relativeOrder The relative order.
             *
             * \return Returns true on success, returns false if the package has already been requested but with
             *         different options.
             */
            bool addPackage(
                const QString& packageName,
                const QString& option,
                int            relativeOrder = nominalPackageRelativeOrdering
            );

            /**
             * Method that can be called by translators to register a needed package.  You should call this method
             * during the \ref Ld::LaTeXTranslationPhase::Phase::IDENTIFY_DEPENDENCIES phase.  The packages will
             * be added to the dependencies file at the end of this phase.
             *
             * \param[in] packageName   The name of the package.
             *
             * \param[in] option1       The first package option.
             *
             * \param[in] option2       The second package option.
             *
             * \param[in] relativeOrder The relative order.
             *
             * \return Returns true on success, returns false if the package has already been requested but with
             *         different options.
             */
            bool addPackage(
                const QString& packageName,
                const QString& option1,
                const QString& option2,
                int            relativeOrder = nominalPackageRelativeOrdering
            );

            /**
             * Method that can be called by translators to register a needed package.  You should call this method
             * during the \ref Ld::LaTeXTranslationPhase::Phase::IDENTIFY_DEPENDENCIES phase.  The packages will
             * be added to the dependencies file at the end of this phase.
             *
             * \param[in] packageName   The name of the package.
             *
             * \param[in] option1       The first package option.
             *
             * \param[in] option2       The second package option.
             *
             * \param[in] option3       The third package option.
             *
             * \param[in] relativeOrder The relative order.
             *
             * \return Returns true on success, returns false if the package has already been requested but with
             *         different options.
             */
            bool addPackage(
                const QString& packageName,
                const QString& option1,
                const QString& option2,
                const QString& option3,
                int            relativeOrder = nominalPackageRelativeOrdering
            );

            /**
             * Method that can be called by translators to register a needed package.  You should call this method
             * during the \ref Ld::LaTeXTranslationPhase::Phase::IDENTIFY_DEPENDENCIES phase.  The packages will
             * be added to the dependencies file at the end of this phase.
             *
             * \param[in] packageName   The name of the package.
             *
             * \param[in] option1       The first package option.
             *
             * \param[in] option2       The second package option.
             *
             * \param[in] option3       The third package option.
             *
             * \param[in] option4       The fourth package option.
             *
             * \param[in] relativeOrder The relative order.
              *
             * \return Returns true on success, returns false if the package has already been requested but with
             *         different options.
             */
            bool addPackage(
                const QString& packageName,
                const QString& option1,
                const QString& option2,
                const QString& option3,
                const QString& option4,
                int            relativeOrder = nominalPackageRelativeOrdering
            );

            /**
             * Method you can call to enter math mode.  You can call this method as many times as you like.  For each
             * call to this method, you are expected to call \ref Ld::LaTeXCodeGenerationEngine::exitMathMode.  Math
             * mode will be left only when the number of calls to  \ref Ld::LaTeXCodeGenerationEngine::exitMathMode
             * matches the number of calls to this method.
             *
             * \param[in] inlineMode If true, this method will enter math inline mode.  If false this method will
             *                       enter math block mode.  This parameter is ignored if the LaTeX translator is
             *                       already in math mode.
             */
            void enterMathMode(bool inlineMode);

            /**
             * Method you can call to exit math mode.  For details, see the description of
             * \ref Ld::LaTeXCodeGenerationEngine::enterMathMode.
             */
            void exitMathMode();

            /**
             * Method you can call to determine if an element is positioned such that it should be rendered in block
             * math mode or inline math mode.
             *
             * \param[in] element The element to be checked.
             *
             * \return Returns true if the element should be rendered in inline mode.  Returns false if the element
             *         should be rendered in block math mode.
             */
            static bool useInlineMathMode(ElementPointer element);

        protected:
            /**
             * Method that returns the translation phase instance to be used.
             *
             * \return Returns a pointer to the currect translation phase instance.
             */
            TranslationPhase* createTranslationPhase() const final;

            /**
             * Method that is called to determine if all root imports should be used.  You should overload this method
             * to determine if root imports should be included.
             *
             * \return Returns true if all root imports should be included.  Returns false if only the main root
             *         element should be used.
             */
            bool includeRootImports() const final;

            /**
             * Method that calls the correct pre-translation method for the required translation.
             *
             * \return Returns true on success, returns false on error.
             */
            bool preTranslate() final;

            /**
             * Method that calls the correct post-translation method for the required translation.
             *
             * \return Returns true on success, returns false on error.
             */
            bool postTranslate() final;

            /**
             * Method you must overload to report a missing translator.
             *
             * \param[in] element The element that was missing a translator.
             *
             * \return Returns true if the code generator should abort.  Returns false if the code
             *         generator should ignore the missing translator and continue.
             */
            bool missingTranslator(ElementPointer element) final;

        private:
            /**
             * Method that is called at the start of the identify dependencies translation phase.
             *
             * \return Returns true on success, returns false on error.
             */
            bool preIdentifyDependencies();

            /**
             * Method that is called at the end of the identify dependencies translation phase.
             *
             * \return Returns true on success, returns false on error.
             */
            bool postIdentifyDependencies();

            /**
             * Method that is called at the start of the preamble translation phase.
             *
             * \return Returns true on success, returns false on error.
             */
            bool prePreamble();

            /**
             * Method that is called at the end of the preamble translation phase.
             *
             * \return Returns true on success, returns false on error.
             */
            bool postPreamble();

            /**
             * Method that is called at the start of the body translation phase.
             *
             * \return Returns true on success, returns false on error.
             */
            bool preBody();

            /**
             * Method that is called at the end of the body translation phase.
             *
             * \return Returns true on success, returns false on error.
             */
            bool postBody();

            /**
             * Method that is called to create the export context.
             *
             * \param[in] outputFile The output file string passed to the XmlExportContext.
             *
             * \param[in] exportMode The requested export mode.  This value determines the type of context to create.
             */
            void createExportContext(const QString& outputFile, CodeGeneratorOutputType::ExportMode exportMode);

            /**
             * Method that returns a copyright string to be placed at the top of the generated LaTeX.
             *
             * \return Returns the generated copyright string.
             */
            QString generateCopyright() const;

            /**
             * Method that returns a LaTeX preamble.
             *
             * \return Returns the generated preamble.
             */
            QString generatePreamble() const;

            /**
             * Flag that indicates if we should ignore missing per-element translators during this translation process.
             */
            bool currentIgnoreMissingPerElementTranslators;

            /**
             * The requested image mode.
             */
            ImageMode currentImageMode;

            /**
             * Flag indicating if root imports should be included or excluded.
             */
            bool currentIncludeImports;

            /**
             * The context used to export the LaTeX representation.
             */
            QSharedPointer<TextExportContext> currentContext;

            /**
             * Flag that indicates if the generated LaTeX should be placed into a single file or into multiple files.
             */
            bool currentSingleFile;

            /**
             * Flag that indicates if copyright headers should be included.
             */
            bool currentIncludeCopyright;

            /**
             * Value indicating the requested Unicode translation mode.
             */
            UnicodeMode currentUnicodeTranslationMode;

            /**
             * Map used to track preamble data.
             */
            QMap<int, QSet<QString>> currentPreambleData;

            /**
             * The LaTeX body filename.
             */
            QString latexBodyFilename;

            /**
             * The current math mode nesting level.
             */
            unsigned currentMathModeNesting;

            /**
             * Indicates if we entered math inline mode or math block mode.
             */
            bool currentInlineMode;
    };
};

#endif
