/*-*-c++-*-*************************************************************************************************************
* Copyright 2016 - 2023 Inesonic, LLC.
*
* This file is licensed under two licenses.
*
* Inesonic Commercial License, Version 1:
*   All rights reserved.  Inesonic, LLC retains all rights to this software, including the right to relicense the
*   software in source or binary formats under different terms.  Unauthorized use under the terms of this license is
*   strictly prohibited.
*
* GNU Public License, Version 2:
*   This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
*   License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later
*   version.
*
*   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
*   details.
*
*   You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
*   Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
********************************************************************************************************************//**
* \file
*
* This header defines the \ref Ld::CppCodeGeneratorDiagnostic class.
***********************************************************************************************************************/

/* .. sphinx-project ineld */

#ifndef LD_CPP_CODE_GENERATOR_DIAGNOSTIC_H
#define LD_CPP_CODE_GENERATOR_DIAGNOSTIC_H

#include <QCoreApplication> // For Q_DECLARE_TR_FUNCTIONS macro.
#include <QSharedPointer>
#include <QString>
#include <QSharedPointer>

#include <cbe_cpp_compiler_error_codes.h>

#include "ld_common.h"
#include "ld_element_structures.h"
#include "ld_cpp_translation_phase.h"
#include "ld_diagnostic.h"

namespace Ld {
    class CppContext;

    /**
     * Base class for diagnostics generated by a code generator.  This object uses a pimpl design pattern allowing you
     * to efficiently pass the diagnostic by value, if desired.
     */
    class LD_PUBLIC_API CppCodeGeneratorDiagnostic:public Diagnostic {
        Q_DECLARE_TR_FUNCTIONS(Ld::CppCodeGeneratorDiagnostic)

        public:
            /**
             * Type representing the translation diagnostic being reported.  Note that values here must align with
             * values in the method \ref Ld::CppCodeGeneratorDiagnostic::diagnosticMessage.
             */
            enum class Code {
                /**
                 * Indicates no diagnostic.
                 */
                NO_DIAGNOSTIC,

                /**
                 * Indicates a missing field.  Generated by the \ref Ld::PlaceholderElement.
                 */
                MISSING_PARAMETER_OR_FIELD,

                /**
                 * Indicates a diagnostic reported by the compiler backend and not by the translation engine.
                 */
                COMPILER_DIAGNOSTIC,

                /**
                 * Indicates a diagnostic reported by the linker and not by the translation engine.
                 */
                LINKER_DIAGNOSTIC,

                /**
                 * Indicates an unexpected translation phase.  This generally representing a bug in the code.
                 */
                UNEXPECTED_TRANSLATION_PHASE,

                /**
                 * Indicates that a translator has not been registered for a given element.
                 */
                MISSING_TRANSLATOR,

                /**
                 * Indicates that a data type translator has not been registered for a given data type.
                 */
                MISSING_DATA_TYPE_TRANSLATOR,

                /**
                 * Indicates that a data type translator has not been registered for a given data type.
                 */
                MISSING_DATA_TYPE_SET_OPERATION_TRANSLATOR,

                /**
                 * Indicates the variable has already been assigned to a data type.
                 */
                CONFLICTING_DATA_TYPE_ASSIGNMENT,

                /**
                 * Indicates an attempt to assign a type to a non variable or subscripted variable.
                 */
                INVALID_TYPE_ASSIGNMENT,

                /**
                 * Indicates we are attempting to assign a variable a value from an incompatible type.
                 */
                INCOMPATIBLE_TYPE_IN_ASSIGNMENT,

                /**
                 * Indicates a bad literal value.
                 */
                MALFORMED_LITERAL_VALUE,

                /**
                 * Indicates an invalid variable or function name.
                 */
                INVALID_VARIABLE_OR_FUNCTION_NAME,

                /**
                 * Indicates that we expected a variable.
                 */
                EXPECTED_VARIABLE,

                /**
                 * Indicates an undefined variable name.
                 */
                UNDEFINED_VARIABLE,

                /**
                 * Incompatible operator.
                 */
                UNEXPECTED_OR_INCOMPATIBLE_OPERATOR,

                /**
                 * Duplicate function.
                 */
                FUNCTION_ALREADY_DEFINED,

                /**
                 * Division by boolean value is unsafe.
                 */
                DIVISION_BY_BOOLEAN_IS_UNSAFE,

                /**
                 * Division by matrix is not supported.
                 */
                DIVISION_BY_MATRIX_NOT_SUPPORTED,

                /**
                 * Can only subscript matrices.
                 */
                CAN_ONLY_SUBSCRIPT_MATRICES,

                /**
                 * Can only subscript tuples and matrices.
                 */
                CAN_ONLY_SUBSCRIPT_TUPLES_AND_MATRICES,

                /**
                 * Boolean values are not allowed for subscripts.
                 */
                BOOLEAN_SUBSCRIPTS_NOT_SUPPORTED,

                /**
                 * An iterable is empty where at least one value is required.
                 */
                EMPTY_ITERABLE
            };

            /**
             * Type used to represent a compiler diagnostic code.
             */
            typedef Cbe::CppCompilerErrorCodes CompilerCode;

            /**
             * Value used to indicate an invalid byte offset.
             */
            static constexpr unsigned long invalidByteOffset = static_cast<unsigned long>(-1);

            /**
             * Value used to indicate an invalid line number.
             */
            static constexpr unsigned long invalidLineNumber = static_cast<unsigned long>(-1);

            /**
             * Value used to indicate an invalid column number.
             */
            static constexpr unsigned long invalidColumnNumber = static_cast<unsigned long>(-1);

            CppCodeGeneratorDiagnostic();

            /**
             * Constructor
             *
             * \param[in] element                The element that is associated with this diagnostic.
             *
             * \param[in] diagnosticType         Indicates if this diagnostic is fatal, a warning, etc.
             *
             * \param[in] translationPhase       The translation phase that generated the diagnostic.
             *
             * \param[in] diagnosticCode         The diagnostic code.
             *
             * \param[in] backendMessage         An optional message generated by the compiler or linker backend.
             *
             * \param[in] context                An optiona context containing the intermediate representation plus the
             *                                   compiler and linker settings.
             *
             * \param[in] compilerDiagnosticCode An optional compiler diagnostic code reported by the backend.
             *
             * \param[in] byteOffset             An optional zero-based byte offset into the context.
             *
             * \param[in] lineNumber             An optional one-based line number into the context.
             *
             * \param[in] columnNumber           An optional zero-based column number into the context.
             */
            CppCodeGeneratorDiagnostic(
                ElementPointer             element,
                Type                       diagnosticType,
                const CppTranslationPhase& translationPhase,
                Code                       diagnosticCode,
                const QString&             backendMessage = QString(),
                QSharedPointer<CppContext> context = QSharedPointer<CppContext>(),
                CompilerCode               compilerDiagnosticCode = CompilerCode::NO_ERROR,
                unsigned long              byteOffset = invalidByteOffset,
                unsigned long              lineNumber = invalidLineNumber,
                unsigned long              columnNumber = invalidColumnNumber
            );

            /**
             * Copy constructor.
             *
             * \param[in] other The instance to be copied.
             */
            CppCodeGeneratorDiagnostic(const CppCodeGeneratorDiagnostic& other);

            ~CppCodeGeneratorDiagnostic() override;

            /**
             * Method you can use to obtain a diagnostic message.
             *
             * \return Returns a usable message describing the diagnostic.
             */
            QString diagnosticMessage() const final;

            /**
             * Method you can use to obtain the translation phase that generated the diagnostic.
             *
             * \return The translation phase where the error was detected.
             */
            const CppTranslationPhase& translationPhase() const override;

            /**
             * Method you can use to obtain the diagnostic code.
             *
             * \return Returns the diagnostic code.
             */
            Code diagnosticCode() const;

            /**
             * Method you can use to obtain the compiler context holding the intermediate representation.
             *
             * \return Returns a shared pointer to the underlying compiler context.  A null pointer is returned if this
             *         diagnostic has no associated context.
             */
            QSharedPointer<CppContext> context() const;

            /**
             * Method you can use to obtain the byte offset into the context associated with the diagnostic.
             *
             * \return Returns the byte offset into the context tied to the diagnostic.  A value of
             *         \ref Ld::CppCodeGeneratorDiagnostic::invalidByteOffset is returned if there is no location in the
             *         context (or no context) tied to this diagnostic.
             */
            unsigned long byteOffset() const;

            /**
             * Method you can use to obtain the one based line number into the context associated with the diagnostic.
             *
             * \return Returns the line number of the line in the context tied to the diagnostic.  A value of
             *         \ref Ld::CppCodeGeneratorDiagnostic::invalidLineNumber is returned if there is no location in the
             *         context (or no context) tied to this diagnostic.
             */
            unsigned long lineNumber() const;

            /**
             * Method you can use to obtain the zero based column number into the context associated with the
             * diagnostic.
             *
             * \return Returns the column number of the column in the context tied to the diagnostic.  A value of
             *         \ref Ld::CppCodeGeneratorDiagnostic::invalidColumnNumber is returned if there is no location in
             *         the context (or no context) tied to this diagnostic.
             */
            unsigned long columnNumber() const;

            /**
             * Method you can use to obtain the compiler diagnostic code associated with this diagnostic.
             *
             * \return Returns the compiler diagnostic code associated with this diagnostic.  A value of
             *         Cbe::CppCompilerErrorCodes::NO_ERROR is returned if there is no compiler diagnostic tied to this
             *         diagnostic.
             */
            CompilerCode compilerCode() const;

            /**
             * Method you can use to obtain a string describing the error as reported by the compiler backend.
             *
             * \return Returns the compiler diagnostic message as a string.
             */
            QString backendMessage() const;

            /**
             * Assignment operator
             *
             * \param[in] other The instance to be copied.
             */
            CppCodeGeneratorDiagnostic& operator=(const CppCodeGeneratorDiagnostic& other);

        private:
            /**
             * Method that returns a compiler diagnostic message based on the current compiler diagnostic code.
             */
            QString compilerDiagnosticMessage() const;

            class Private;

            QSharedPointer<Private> impl;
    };
};

#endif
